<div x-data="headerHandler" 
    @scroll.window="checkScrollPosition(); window.pageYOffset > 160 ? scrolledFromTop = true : scrolledFromTop = false"
    
    id="headerWrapper"
    class="flex flex-wrap max-w-full transition-all duration-200 transform font-copy lg:justify-center lg:w-full ">

    <div id="brandNavWrapper" 
        class="relative z-0 flex items-center justify-center order-1 w-full bg-white">
        {{> components/Header/BrandNavigation/BrandNavigation }} 
    </div>

    <div id="serviceNavWrapper" 
        class="relative flex justify-center order-2 w-full md:border-white md:border-b bg-blue-congress z-101">   
        <div id="serviceNavMainContainer" 
            class="container flex h-10 pl-2 md:h-12 md:pl-5 md:pr-0 lg:px-10 lg:h-16">
            <span id="serviceNavHeadline" class="hidden">Service Navigation</span>

            <div id="serviceLogoWrapper" 
                 class="flex items-center order-1 w-full px-2 lg:items-end lg:pb-3 bg-blue-congress md:px-0 md:h-12 lg:h-16 md:w-1/2 md:max-w-1/2 lg:w-1/4 lg:max-w-1/4">
                {{> components/Header/ServiceLogo }}
            </div>
            
            <div id="serviceItemsWrapper" 
                class="flex items-center justify-end flex-initial order-2 inline-block w-full max-w-full align-top bg-blue-congress md:h-12 lg:h-16 lg:order-2 lg:w-3/4 lg:max-w-3/4 md:mt-0 md:w-1/2 md:max-w-1/2 md:order-2 md:border-0 ">
                {{> components/Header/ServiceNavigation/ServiceList }}

                {{> components/Header/Search/QuickSearchButton }}
                <div class="hidden lg:flex">
                    {{> components/Header/Search/QuickSearchForm }}
                </div>

                <div id="burgerWrapper" 
                    class="flex justify-end flex-none order-2 lg:order-4 md:order-4 md:px-4 lg:hidden "> 
                    {{> components/Header/Burger }}    
                </div>
            </div>
        </div>
    </div>

    <div id="sectionNavWrapper"  
        x-data="sectionNavWrapperHandler" 
        @resize.window="resizehandler"
        x-ref="sectionnavigation"
        @toggle-sectionnav.window="toggleSectionNav"  
        class="flex justify-center order-3 w-full mt-10 overflow-hidden transition-all duration-200 ease-in-out max-h-0 md:mt-0 lg:flex lg:h-auto lg:max-h-full bg-blue-congress z-100"
    >
        {{> components/Header/SectionNavigation/SectionNavigation }} 
        
    </div>
    
    <div 
        x-show="searchFieldOpen"
        id="searchWrapper" 
        class="flex justify-end order-4 w-full max-w-full p-2 px-4 -mt-10 bg-white md:mt-0 z-101 lg:hidden"
        @search-close.window="searchFieldOpen = false"
        @click.outside="searchFieldOpen = false; $dispatch('search-mobile-click-outside'); dropped = false"
        x-transition:enter="transition ease-out duration-200" 
        x-transition:enter-start="opacity-0 transform scale-y-90" 
        x-transition:enter-end="opacity-100 transform scale-y-100" 
        x-transition:leave="transition ease-in duration-100" 
        x-transition:leave-start="opacity-100 transform scale-y-100" 
        x-transition:leave-end="opacity-0 transform scale-y-90">

        {{> components/Header/Search/QuickSearchForm }}

    </div>

</div>
<script>
    

    document.addEventListener('alpine:init', () => {

        
        const mydata = Alpine.reactive({ screensize: window.innerWidth })
        const defaultBreakpoints = {
                xs: 0,
                sm: 640,
                md: 768,
                lg: 1024,
                xl: 1280,
                '2xl': 1536,
            }
        const breakpoints = (window.AlpineMagicHelpersConfig && window.AlpineMagicHelpersConfig.breakpoints)
            ? window.AlpineMagicHelpersConfig.breakpoints
            : defaultBreakpoints

        let update
        window.addEventListener('resize', () => {
            clearTimeout(update)
            update = setTimeout(() => { mydata.screensize = window.innerWidth }, 150)
        })    
              
        Alpine.magic('screen', el => (breakpoint) => {
            const width = mydata.screensize
            if (Number.isInteger(breakpoint)) return breakpoint <= width
            if (breakpoints[breakpoint] === undefined) {
                throw Error('Undefined $screen property: ' + breakpoint + '. Supported properties: ' + Object.keys(breakpoints).join(', '))
            }
            return breakpoints[breakpoint] <= width
        })

        Alpine.store('burgeropen', false);
        Alpine.store('searchFieldOpen', false);
        
        Alpine.data('dropdown', () => ({
            dropped: false,
            toggle() {    
                this.dropped = ! this.dropped;    
            }
        }))
        
        Alpine.data('headerHandler', () => ({  
            searchFieldOpen : false, 
            
            init() { 
                
            },
            
            checkScrollPosition() {
                let lastScrollTop = 0 
                let scrollAmount = window.pageYOffset || document.documentElement.scrollTop
                let halfOfHeight =
                    window.innerHeight ||
                    (document.documentElement || document.body).clientHeight / 2
                let one = 500, two = 900, three = 1300
                
                let contentOffset = document.querySelector('#content').offsetTop

                if (scrollAmount > lastScrollTop) {
                    if (scrollAmount > contentOffset) {
                        console.log('scrollamount > contentOffset')
                    }
                    if (scrollAmount > one) {
                        console.log('scrollamount > one')
                        document.querySelector('#headerWrapper').classList.add('-translate-y-8');
                    }
                    if (scrollAmount > two) {
                        console.log('scrollamount > two')
                        document.querySelector('#sectionNavWrapper').classList.add('-translate-y-10');
                    }
                    if (scrollAmount > three) {
                        console.log('scrollamount > three')
                        document.querySelector('#burgerWrapper').classList.remove('lg:hidden');
                    }
                } else {
                    if (scrollAmount < one) {
                        console.log('scrollamount < one')
                        document.querySelector('#headerWrapper').classList.remove('-translate-y-8');
                    }
                    if (scrollAmount < two) {
                        console.log('scrollamount < two')
                        document.querySelector('#sectionNavWrapper').classList.remove('-translate-y-10');
                    }
                    if (scrollAmount < three) {
                        console.log('scrollamount < three')
                        document.querySelector('#burgerWrapper').classList.add('lg:hidden');
                    }

                    if (scrollAmount < contentOffset) {
                        
                        {{!-- fireEvent('hr:global:userScrolledToTop') --}}
                        console.log('scrollamount < contentOffset')
                    }
                }
                lastScrollTop = scrollAmount <= 0 ? 0 : scrollAmount
            }
        }))

        Alpine.data('flyoutHandler', () => ({   
            init() { 
                if(window.innerWidth < 1024) {
                    this.$el.setAttribute("x-collapse","")
                }  
            },
            sectionNavFlyoutWatcher() {
                this.$watch('dropped', value => {
                if(value == true ) { 
                    let a = this.$refs.sectionnavigation.scrollHeight + this.$el.scrollHeight; 
                    this.$refs.sectionnavigation.style.maxHeight = a +'px' 
                } else {
                    let a = this.$refs.sectionnavigation.scrollHeight; 
                    this.$refs.sectionnavigation.style.maxHeight = a +'px'
                    }
                })   
            },
            setFlyoutAnimationStyle() {
                if(window.innerWidth > 1023) {
                    if(this.$el.hasAttribute("x-collapse")) {
                        this.$el.removeAttribute("x-collapse")
                        delete this.$el._x_transition; 
                        this.$el.style.removeProperty('overflow'); 
                        this.$el.style.removeProperty('height'); 
                        if (! this.$el._x_isShown) this.$el.style.display = 'none'
                    }
                } else {
                    if(!this.$el.hasAttribute("x-collapse")) this.$el.setAttribute("x-collapse","")
                }
            }
        }))
    
        Alpine.data('sectionNavWrapperHandler', () => ({
            init() {},     
            resizehandler() { 
                if(window.innerWidth > 1024) {
                    this.$el.setAttribute("style","")
                } else {
                    this.$el.classList.add('hidden')
                    this.$el.style.maxHeight="0px"
                }

                let timeout 
                clearTimeout(timeout)
                timeout = setTimeout(() => {
                    this.$el.classList.remove('hidden')
                    this.$dispatch('burger-close')
                    this.$dispatch('search-mobile-click-outside')
                    this.$dispatch('search-close')
                }, 500)
            },
            toggleSectionNav() {
                if(this.$event.detail === false) { 
                    if (window.innerWidth < 1024) { 
                        this.$el.style.maxHeight='0px' 
                    } else { 
                        this.$el.style = '' 
                    }
                } else { 
                    this.$el.style.maxHeight = this.$el.scrollHeight + 'px' 
                }
            }
        }))
})
</script>