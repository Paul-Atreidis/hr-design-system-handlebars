<div id="headerWrapper"
    x-data="mainNavigationHandler()"
    x-init="init()"
    @resize.window="resetNav()"   
    :class="`${percent}` > 0 ? '-translate-y-8' : ''"
    class="fixed top-0 left-0 flex flex-wrap max-w-full transition-all duration-500 transform font-copy lg:justify-center lg:w-full ">

    <div id="brandNavWrapper" 
        class="relative z-0 flex items-center justify-center order-1 w-full bg-white">
        {{> components/Header/BrandNavigation/BrandNavigation }} 
    </div>

    <div id="serviceNavWrapper" 
        class="relative flex justify-center order-2 w-full md:border-white md:border-b bg-blue-congress z-101">   
        <div id="serviceNavMainContainer" 
            class="container flex h-10 pl-2 md:h-12 md:pl-5 md:pr-0 lg:px-10 lg:h-16">

            <span id="serviceNavHeadline" class="hidden">Service Navigation</span>

            <div id="serviceLogoWrapper" 
                 class="flex items-center order-1 w-full px-2 lg:items-end lg:pb-3 bg-blue-congress md:px-0 md:h-12 lg:h-16 md:w-1/2 md:max-w-1/2 lg:w-1/4 lg:max-w-1/4">
                {{> components/Header/ServiceLogo }}
            </div>
            
            <div id="serviceItemsWrapper" 
                class="flex items-center justify-end flex-initial order-2 inline-block w-full max-w-full align-top bg-blue-congress md:h-12 lg:h-16 lg:order-2 lg:w-3/4 lg:max-w-3/4 md:mt-0 md:w-1/2 md:max-w-1/2 md:order-2 md:border-0 ">
                {{> components/Header/ServiceNavigation/ServiceList }}

                {{> components/Header/Search/QuickSearchButton }}

                <div class="hidden lg:flex">
                    {{> components/Header/Search/QuickSearchForm }}
                </div>
            
                <div id="burgerWrapper" 
                    class="flex justify-end flex-none order-2 lg:order-4 md:order-4 md:px-4 lg:hidden "> 
                    {{> components/Header/Burger }}    
                </div>
                
            </div>
        </div>
    </div>

    <div id="sectionNavWrapper"  
        x-ref="sectionnavigation"
        @toggle-sectionnav.window="toggleSectionNav"
        :class="shouldSectionNavBeHidden() ? '-translate-y-40' : ''"  
        class="flex justify-center order-3 w-full mt-10 overflow-hidden transition-all duration-500 ease-in-out lg:duration-1000 lg:overflow-visible max-h-0 md:mt-0 lg:flex lg:max-h-full lg:h-auto bg-blue-congress z-100"
    >
        {{> components/Header/SectionNavigation/SectionNavigation }}
    </div>
    
    <div id="searchWrapper" 
        x-show="searchFieldOpen"
        class="flex justify-end order-4 w-full max-w-full p-2 px-4 -mt-10 bg-white md:mt-0 z-101 lg:hidden"
        @search-close.window="searchFieldOpen = false"
        @click.outside="searchFieldOpen = false; $dispatch('search-mobile-click-outside'); dropped = false"
        x-transition:enter="transition ease-out duration-200" 
        x-transition:enter-start="opacity-0 transform scale-y-90" 
        x-transition:enter-end="opacity-100 transform scale-y-100" 
        x-transition:leave="transition ease-in duration-100" 
        x-transition:leave-start="opacity-100 transform scale-y-100" 
        x-transition:leave-end="opacity-0 transform scale-y-90">

        {{> components/Header/Search/QuickSearchForm }}

    </div>

</div>
<script>
    const mainNavigationHandler = () => {
            return {
                searchFieldOpen: false,
                init(){
                    let lastScrollTop = 0
                    window.addEventListener('scroll', () => {
                        let winScroll = document.body.scrollTop || document.documentElement.scrollTop
                        let height = document.documentElement.scrollHeight - document.documentElement.clientHeight
                        this.percent = Math.round((winScroll / height) * 100)
                        winScroll > lastScrollTop ? this.scrollingDown = true : this.scrollingDown = false
                        lastScrollTop = winScroll
                        console.log(this.scrollingDown)
                    })
                },
                percent: 0,
                scrollingDown: true,
                shouldSectionNavBeHidden() {
                    return this.percent > 30  && this.scrollingDown   
                },
                resetNav() { 
                    if(window.innerWidth > 1023) {
                        this.$refs.sectionnavigation.setAttribute("style","")
                    } else {
                        // hidden needs to be set here to avoid flickering of the sectionNav on viewport change, gets removed in timeout
                        this.$refs.sectionnavigation.classList.add('hidden')
                        this.$refs.sectionnavigation.style.maxHeight="0px"
                    }
                    // timeout is used to dispatch events after the resize is done
                    let timeout 
                    clearTimeout(timeout)
                    timeout = setTimeout(() => {
                        this.$refs.sectionnavigation.classList.remove('hidden')
                        this.$store.burgeropen == true ? this.$dispatch('burger-close') :null
                        this.$store.searchFieldOpen === true ? this.$dispatch('search-mobile-click-outside') :null
                        this.$store.searchFieldOpen === true ? this.$dispatch('search-close') :null
                    }, 500)
                }, 
                toggleSectionNav() {
                //false = sectionNav schließt ( mobile/tablet? --> maxHeight = 0  ///  desktop? just clear maxHeight attribute )  
                //true = sectionNav öffnet (maxheight = scrollheight)   
                    console.log('toggleSectionNav, Event: ' + this.$event.detail )    
                    if(this.$event.detail === false) {                   
                        if (window.innerWidth < 1024) { 
                            this.$refs.sectionnavigation.style.maxHeight='0px'
                        } else { 
                            this.$refs.sectionnavigation.style.maxHeight = '' 
                        }
                    } else { 
                        this.$refs.sectionnavigation.style.maxHeight = this.$el.scrollHeight + 'px' 
                    }
                }   
                
            }
        }


    //Main Alpine Init Listener
    document.addEventListener('alpine:init', () => {
        const mydata = Alpine.reactive({ screensize: window.innerWidth })
        const defaultBreakpoints = {
                xs: 0,
                sm: 640,
                md: 768,
                lg: 1024,
                xl: 1280,
                '2xl': 1536,
            }
        const breakpoints = (window.AlpineMagicHelpersConfig && window.AlpineMagicHelpersConfig.breakpoints)
            ? window.AlpineMagicHelpersConfig.breakpoints
            : defaultBreakpoints
        let update
        window.addEventListener('resize', () => {
            clearTimeout(update)
            update = setTimeout(() => { mydata.screensize = window.innerWidth }, 150)
        })  

        Alpine.magic('screen', el => (breakpoint) => {
            const width = mydata.screensize
            if (Number.isInteger(breakpoint)) return breakpoint <= width
            if (breakpoints[breakpoint] === undefined) {
                throw Error('Undefined $screen property: ' + breakpoint + '. Supported properties: ' + Object.keys(breakpoints).join(', '))
            }
            return breakpoints[breakpoint] <= width
        })

        Alpine.store('burgeropen', false);
        Alpine.store('searchFieldOpen', false);
        
        Alpine.data('dropdown', () => ({
            dropped: false,
            toggle() {    
                this.dropped = ! this.dropped;    
            }
        }))
        
        // There are several Flyouts sharing the same functionality and context, so put the data in an Alpine.data to make it reusable
        Alpine.data('flyoutHandler', () => ({   
            init() {
                //Initial: x-collapse only on mobile/tablet 
                if(window.innerWidth < 1024) {
                    this.$el.setAttribute("x-collapse","")
                }  
            },
            sectionNavFlyoutWatcher() {
                //Adds scrollheight of the flyout to sectionNav container to make sure all following items stay visible
                this.$watch('dropped', value => {
                if(value == true ) { 
                    let a = this.$refs.sectionnavigation.scrollHeight + this.$el.scrollHeight; 
                    this.$refs.sectionnavigation.style.maxHeight = a +'px' 
                } else {
                    let a = this.$refs.sectionnavigation.scrollHeight; 
                    this.$refs.sectionnavigation.style.maxHeight = a +'px'
                    }
                })   
            },
            setFlyoutAnimationStyle() {
                //sets/cleansup the x-collapse attributes depending on window.innerWidth, gets fired @resize.window in NavigationFlyout.hbs
                if(window.innerWidth > 1023) {
                    if(this.$el.hasAttribute("x-collapse")) {
                        this.$el.removeAttribute("x-collapse")
                        delete this.$el._x_transition; 
                        this.$el.style.removeProperty('overflow'); 
                        this.$el.style.removeProperty('height'); 
                        if (! this.$el._x_isShown) this.$el.style.display = 'none'
                        if(this.$el.hasAttribute("hidden")) this.$el.removeAttribute("hidden")
                    }
                    
                } else {
                    if(!this.$el.hasAttribute("x-collapse")) this.$el.setAttribute("x-collapse","")
                }
            }
        }))
    
})
</script>